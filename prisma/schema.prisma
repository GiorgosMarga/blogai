// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String    @id @default(uuid())
  email                   String    @unique
  password                String
  fullName                String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @default(now())
  role                    Role      @default(USER)
  isVerified              Boolean   @default(false)
  posts                   Post[]    @relation(name: "creator")
  verificationId          String    @default("")
  verificationIdTimestamp DateTime  @default(now())
  comments                Comment[]
  bookmarked              String[]
  followers               Int       @default(0)
  likes                   Likes[]

  @@index([email])
  @@index([id])
}

model Likes {
  userId String
  postId String
  user   User   @relation(references: [id], fields: [userId])
  post   Post   @relation(references: [id], fields: [postId])

  @@unique([userId, postId])
}

model Post {
  id         String    @id @default(uuid())
  title      String
  subtitle   String    @default("")
  content    String
  user       User      @relation(fields: [userId], references: [id], name: "creator")
  userId     String
  // likes      Int       @default(0)
  cover      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  category   Category
  tags       String[]
  isVisible  Boolean   @default(false)
  isFeatured Boolean   @default(false)
  comments   Comment[]
  likes      Likes[]

  @@index([id])
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  creator   User     @relation(fields: [creatorId], references: [id])
  creatorId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  content   String
}

enum Role {
  ADMIN
  USER
}

enum Category {
  PROGRAMMING
  TECHNOLOGY
  DATA_SCIENCE
  MACHINE_LEARNING
  WEB_DEV
  BLOCKCHAIN
  DEV_OPS
  GAMING
}
