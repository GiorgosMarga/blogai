import React, { useRef, useState, useEffect } from 'react'
import {FaBold, FaItalic ,FaStrikethrough, FaQuoteRight, FaCode, FaListUl, FaListOl} from "react-icons/fa"
import {AiOutlineMinus,AiOutlineNumber} from 'react-icons/ai'
import {BsBodyText} from 'react-icons/bs'
enum ArrowKeys {
  LEFT = 'ArrowLeft',
  RIGHT= 'ArrowRight',
  DOWN = 'ArrowDown',
  UP = 'ArrowUp',
  ENTER = 'Enter',
  BACKSPACE='Backspace'
}

enum ActionToMD {
  BOLD = '****',
  ITALICS ='**',
  STRIKETHROUGH="~~~~",
  HR=`\n-----------\n`,
  TITLE= '#',
  QUOTE='>',
  CODE="`code here`",
  CODE_BLOCK="```\ncode here\n```",
  UNORDER_LIST= `-`,
  ORDERED_LIST=`1.  `
}


const MarkdownEditor = ({value,setValue}:{value:string; setValue:React.Dispatch<React.SetStateAction<string>>}) => {
  const [cursorPosition,setCursorPosition] = useState(50);
  const [isULEnabled,setIsULEnabled] = useState(false)
  const [isOLEnabled,setIsOLEnabled] = useState(false)
  const [olNumber,setOlNumber] = useState(2); //1 gets autogenerated

  const textAreaRef = useRef<HTMLTextAreaElement>(null)

  useEffect(() => {
    if(textAreaRef && textAreaRef.current){
      textAreaRef.current.selectionStart = cursorPosition
    }
  },[textAreaRef])


  // the next 2 function help to enable and disable the ul/ol autocomplete feature
  const unorderListHandler = () => {
    setIsULEnabled((prevState) => !prevState)
  }

  const orderedListHandler = () => {
    setIsOLEnabled(prevState => !prevState)
  }

  const onChangeHandler = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setValue(e.currentTarget.value)
    setCursorPosition(e.target.selectionStart)
  }
  // Handler to get the right cursor position inside the text area while clicking
  const onClickHandler = (e:React.MouseEvent<HTMLTextAreaElement, MouseEvent>) => {
    setCursorPosition(e.currentTarget.selectionStart)
  }

  // Handler that helps to get the right cursor position inside the textarea while using the arrow keys and helps in autocompletion while ol o ul is enabled
  const onPressKeyHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if(e.key === ArrowKeys.DOWN || e.key === ArrowKeys.UP || e.key === ArrowKeys.RIGHT || e.key === ArrowKeys.LEFT){
      setCursorPosition(e.currentTarget.selectionStart)
      return;
    }
    // for ul and ol
    if(e.key === ArrowKeys.ENTER){
      if(isULEnabled){
        // remove last \n added from 'Enter'

        e.preventDefault()
        setValue((prevState) => prevState + `\n- `)
        return
      }
      if(isOLEnabled){
        // remove last \n added from 'Enter'
        e.preventDefault()
        setValue((prevState) => prevState + `\n${olNumber}. `)
        setOlNumber((prevState) => prevState + 1)
      }
    }

    // when the ordered list autofill features is enabled and we delete the last item we need to decrement the olnumber sp it can generate the right one
    // in the next autofill
    if(e.key === ArrowKeys.BACKSPACE){
      if(isOLEnabled){
        console.log('s')
        const listItems = value.split('\n');
        const lastListItem = listItems?.at(-1)
        const splittedLastItem = lastListItem?.split('.')
        // if length is 1 it means all the line content is deleted and only the number is there
        if(splittedLastItem?.length === 1){
          const lastNumber = splittedLastItem?.at(0)
          if(lastNumber){
            const parsedNumber = parseInt(lastNumber)
            e.preventDefault() // without this, if we pop then we delete the last character of the previus line
            listItems.pop()
            setValue(listItems?.join('\n'))
            setOlNumber(parsedNumber)
          }
        }
        
      }
    }
  }

  const translateToMdHandler = (action: ActionToMD) => {
    const newValue = value.substring(0,cursorPosition) + action + value.substring(cursorPosition)

    setValue(newValue)
    if(textAreaRef.current && textAreaRef.current.selectionStart && textAreaRef.current.selectionEnd){
      textAreaRef.current.value = newValue
      textAreaRef.current.selectionStart = textAreaRef.current.selectionEnd =  cursorPosition + (Math.ceil(action.length / 2))
      textAreaRef.current?.focus()
    }
  }

  const addBold = () => {
    translateToMdHandler(ActionToMD.BOLD);
  }
  const addItalics = () => {
    translateToMdHandler(ActionToMD.ITALICS)
  }
  const addStrikethrou = () => {
    translateToMdHandler(ActionToMD.STRIKETHROUGH)
  }

  const addHR = () => {
    translateToMdHandler(ActionToMD.HR)
  }

  const addTitle = () => {
    translateToMdHandler(ActionToMD.TITLE)
  }

  const addQuote = () => {
    translateToMdHandler(ActionToMD.QUOTE)
  }

  const addCode = () => {
    translateToMdHandler(ActionToMD.CODE)
  }

  const addCodeBlock = () => {
    translateToMdHandler(ActionToMD.CODE_BLOCK)
  }

  const addUnorderedList = () => {
    unorderListHandler()
    
  }
  useEffect(() => {
    if(isULEnabled){
      translateToMdHandler(ActionToMD.UNORDER_LIST)
    }else{
      textAreaRef.current?.focus()
    }
  }, [isULEnabled])

  
  const addOrderedList = () => {
    orderedListHandler()
  }
  useEffect(() => {
    if(isOLEnabled){
      translateToMdHandler(ActionToMD.ORDERED_LIST)
    }else{
      textAreaRef.current?.focus()
      setOlNumber(2)
    }
  },[isOLEnabled])

  return (
    <div className='flex flex-col w-[80%]'>
        {/* options */}
        <div className='flex space-x-4 border p-2 border-gray-200/20 rounded-lg'>
            <FaBold className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addBold} title='Add bold text.'/>
            <FaItalic className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addItalics} title='Add italic text.'/>
            <FaStrikethrough className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addStrikethrou} title='Add strikethrough text.'/>
            <AiOutlineMinus className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addHR} title='Insert HR'/>
            <AiOutlineNumber className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addTitle} title="Insert title."/>
            <FaQuoteRight className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addQuote} title='Insert a quote.'/>
            <FaCode className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addCode} title='Insert code.'/>
            <BsBodyText className='w-4 h-4 text-white cursor-pointer hover:bg-slate-400/10  hover:text-blue-500' onClick={addCodeBlock } title='Insert a block of code.'/>
            <FaListOl className={`w-4 h-4 cursor-pointer hover:bg-slate-400/10  hover:text-blue-500 ${isOLEnabled ? "text-blue-800" : "text-white"}`} onClick={addOrderedList} title='Add ordered list.'/>
            <FaListUl className={`w-4 h-4 cursor-pointer hover:bg-slate-400/10  hover:text-blue-500 ${isULEnabled ? "text-blue-800" : "text-white"}`} onClick={addUnorderedList } title='Add unordered list.'/>

        </div>
    {/* text area */}
        <textarea ref={textAreaRef}  className='outline-none bg-blue-950/50 shadow-lg text-white p-2 mt-2 rounded-lg min-h-[500px] h-[500px] max-h-[500px]' value={value} onChange={onChangeHandler} onClick={onClickHandler} onKeyDown={onPressKeyHandler}/>
    </div>
  )
}

export default MarkdownEditor